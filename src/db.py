# CAMS Software
# Purpose: Database interface code
# Date: Febuary 7, 2023 - February 22, 2023
# CrazyblocksTechnologies Computer Laboratories 2023

import os
import csv
from datetime import date
from lib import csv2list

from sqlalchemy.orm import declarative_base
from sqlalchemy import ForeignKey, Column, Integer, String

def makeclass(table, col):
    cols = csv2list(col)

    # Class name and SQLAlc tablename
    args = {"table": table}
    cls = """class {table}(Base):
    __tablename__ = "{table}"
""".format(**args)
    
    for i in cols:
        
        table_col = i["col"]
        
        if i["datatype"] == "autointeger":
            cls += f"    {table_col} = Column(Integer, primary_key=True)"
        elif i["datatype"] == "text":
            string_default_max = "127"
            cls += f"    {table_col} = Column(String({string_default_max}))"
        else:
            pass
            
    return cls
    

# May or may not be needed soon 
def checkdb(dbfile):
    if not os.path.isfile(dbfile): 
        return False
    
    size = os.path.getsize(dbfile)

    if size == 0: 
        return True

    # SQLite database file header is 100 bytes
    if size < 100: 
        return False
    
    # Validate file header
    with open(dbfile, 'rb') as fd: 
        header = fd.read(100)    

    return (header[:16] == b'SQLite format 3\x00')

        
def initdb(dbfile):
    # String that would be written to models.py
    content = ""
    
    currentdate = date.today()
    currentdate = currentdate.strftime("%B %d, %Y")
    
    args = {
    "date": currentdate,
    "dbfile": dbfile,
    }
    
    # File header
    content += """# ---
# THIS FILE IS AUTOMATICALLY GENERATED - DO NOT EDIT
# ---
# CAMS Software
# Purpose: Python class representation of database tables
# Generated: {date}

from sqlalchemy import Column, ForeignKey, Integer, String, Text, create_engine
from sqlalchemy.orm import declarative_base
import hashlib

engine = create_engine("sqlite:///{dbfile}")

Base = declarative_base()

# Hard-coded user class
class User(Base):
    __tablename__ = 'user'
    id = Column(Integer, primary_key=True)
    name = Column(Text)
    password = Column(Text)

    def verify_password(self, password):
        h = hashlib.sha512()
        h.update(password)
        pwhash = hexdigest
        return self.password == pwhash

Base.metadata.create_all(engine)
""".format(**args)
    
    
    
    
    # This would overwrite the file if it exists
    with open("src/models.py", "w") as f:
        f.write(content)
        
    # Initialize the database
    import models
        
    
    
        
    return True

        
        
        
        
        
        
